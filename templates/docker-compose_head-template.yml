volumes:
  local:

networks:
  tracker:
  code-space:

services:

  # This is the reverse proxy, the one that will route  all the ingress traffic and
  # authenticate & authorize (TODO) every user trying to access a specific resource
  code-proxy:
    container_name: ${TRAEFIK_CONTAINER_NAME}
    image: ${TRAEFIK_IMAGE}
    restart: always
    command:
      - "--log.level=DEBUG"
      - "--log.filePath=/var/log/traefik.log"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.dnschallenge=true"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=${TRAEFIK_DNS_PROVIDER}"
      - "--certificatesresolvers.myresolver.acme.storage=${TRAEFIK_ACME_STORAGE}"
      - "--certificatesresolvers.myresolver.acme.email=${TRAEFIK_ACME_EMAIL}"
    environment:
      # The proxy settings should be enabled to only update traefik itself
      #- NO_PROXY=${NO_PROXY}
      #- HTTP_PROXY=${HTTP_PROXY}
      #- HTTPS_PROXY=${HTTPS_PROXY}
      - HETZNER_API_KEY=${TRAEFIK_HETZNER_API_KEY}
    labels:
      - "traefik.http.middlewares.forward-auth.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.forward-auth.forwardauth.address=https://${HOSTNAME}.${DOMAIN}/oauth"
      - "traefik.http.middlewares.forward-auth.forwardauth.authResponseHeaders=Authorization,X-Forwarded-User,Set-Cookie"
      - "traefik.http.middlewares.forward-auth.forwardauth.authRequestHeaders=Cookie,Authorization,X-Forwarded-Uri,X-Forwarded-Host,X-Forwarded-Proto,X-Original-Url"
    networks:
      - tracker
      - code-space
    ports:
      - "${TRAEFIK_HTTP_PORT}:80"
      - "${TRAEFIK_HTTPS_PORT}:443"
      - "${TRAEFIK_API_PORT}:8080"
    volumes:
      - ${TRAEFIK_CONF_VOLUME}/conf.d:/conf.d
      - ${TRAEFIK_ACME_VOLUME}:${TRAEFIK_ACME_STORAGE}
      - /var/run/docker.sock:/var/run/docker.sock

  code-auth:
    build: 
      context: ./containers_build/auth-service
    container_name: code-auth
    restart: always
    networks:
      - tracker
      - code-space
    environment:
      - DOMAIN=${DOMAIN}
      - HOSTNAME=${HOSTNAME}
      - KEYCLOAK_REALM=master
      - KEYCLOAK_CLIENT_ID=traefik-client
      - IAM_DB_HOSTNAME=${IAM_DB_HOSTNAME}
      - IAM_DB_USERNAME=${IAM_DB_USERNAME}
      - IAM_DB_PASSWORD=${IAM_DB_PASSWORD}
      - SSO_URL=https://${HOSTNAME}.${DOMAIN}/iam
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth-service.tls=true"
      - "traefik.http.routers.auth-service.entrypoints=websecure"
      - "traefik.http.routers.auth-service.tls.certresolver=myresolver"
      - "traefik.http.services.auth-service.loadbalancer.server.port=3000"
      - "traefik.http.routers.auth-service.rule=Host(`${HOSTNAME}.${DOMAIN}`) && PathPrefix(`/oauth`)"

  # This is the internal database that will be used by architectural app (like keycloak)
  # it MUST NOT be exposed and reachable by end user
  code-db:
    container_name: ${DB_CONTAINER_NAME}
    image: ${DB_IMAGE}
    restart: always
    environment:
      - TZ=${TIMEZONE}
      - MARIADB_USER=${DB_USER}
      - MARIADB_DATABASE=${DB_NAME}
      - MARIADB_PASSWORD=${DB_PASS}
      - MARIADB_ROOT_PASSWORD=${DB_ROOT_PASS}
      - IAM_DB_USERNAME=${IAM_DB_USERNAME}
      - IAM_DB_PASSWORD=${IAM_DB_PASSWORD}
    networks:
      - tracker
    volumes:
      - ${DB_VOLUME}:/var/lib/mysql
      - ${DB_INIT_VOLUME}:/docker-entrypoint-initdb.d
    # Override the entrypoint in this way if you need to change the root password
    # N.B.: after this you can just login wiht root / <empty password>
    # entrypoint: mysqld_safe --skip-grant-tables --user=mysql

  # The keycloak instance will contains all the information to introduce SSO and MFA
  # in the whole stack.
  code-iam:
    container_name: ${IAM_CONTAINER_NAME}
    image: ${IAM_IMAGE}
    command: start-dev
    environment:
      NO_PROXY: ${NO_PROXY}
      HTTP_PROXY: ${HTTP_PROXY}
      HTTPS_PROXY: ${HTTPS_PROXY}
      KC_LOG: console
      KC_LOG_LEVEL: info
      KC_PROXY: passthrough
      KC_HOSTNAME_PATH: /iam
      KC_HTTP_RELATIVE_PATH: /iam
      KC_HOSTNAME_STRICT: "false"
      KC_PROXY_HEADERS: xforwarded
      KC_PROXY_ADDRESS_FORWARDING: "true"
      KEYCLOAK_ADMIN: ${IAM_MGMT_USERNAME}
      KEYCLOAK_ADMIN_PASSWORD: ${IAM_MGMT_PASSWORD}
      KC_HOSTNAME_URL: https://${HOSTNAME}.${DOMAIN}/iam
      KC_HOSTNAME_ADMIN_URL: https://${HOSTNAME}.${DOMAIN}/iam
      KC_DB: mariadb
      KC_DB_URL: jdbc:mariadb://code-db:3306/iam?characterEncoding=UTF-8
      KC_DB_USERNAME: ${IAM_DB_USERNAME}
      KC_DB_PASSWORD: ${IAM_DB_PASSWORD}
    networks:
      - tracker
      - code-space
    links:
      - code-db:code-db
      - code-cache:code-cache
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.code-iam.tls=true"
      - "traefik.http.routers.code-iam.entrypoints=websecure"
      - "traefik.http.routers.code-iam.tls.certresolver=myresolver"
      - "traefik.http.routers.code-iam.rule=Host(`${HOSTNAME}.${DOMAIN}`) && PathPrefix(`/iam`)"
      - "traefik.http.services.code-iam.loadbalancer.server.port=8080"
    depends_on:
      - code-db
    dns: ${DNS_HOST}
    restart: always

  # This is the work tracker software
  code-tracker:
    container_name: ${TRACKER_CONTAINER_NAME}
    image: ${TRACKER_IMAGE}
    restart: always
    environment:
      NO_PROXY: ${NO_PROXY}
      HTTP_PROXY: ${HTTP_PROXY}
      HTTPS_PROXY: ${HTTPS_PROXY}
      LEAN_DEBUG: ${TRACKER_DEBUG}
      LEAN_APP_URL: https://${HOSTNAME}.${DOMAIN}
      LEAN_APP_DIR: ${TRACKER_APP_DIR}
      LEAN_SITENAME: ${TRACKER_SITENAME}
      LEAN_DB_HOST: ${TRACKER_DB_HOST}
      LEAN_DB_USER: ${DB_USER}
      LEAN_DB_PASSWORD: ${DB_PASS}
      LEAN_DB_DATABASE: ${DB_NAME}
      LEAN_DEFAULT_TIMEZONE: ${TRACKER_DEFAULT_TIMEZONE}
      LEAN_SESSION_SECURE: ${TRACKER_SESSION_SECURE}
      LEAN_SESSION_PASSWORD: ${TRACKER_SESSION_PASSWORD}
      LEAN_SESSION_EXPIRATION: ${TRACKER_SESSION_EXPIRATION}
      LEAN_EMAIL_USE_SMTP: ${SMTP_ENABLE}
      LEAN_EMAIL_RETURN: ${SMTP_RCPT}
      LEAN_EMAIL_SMTP_HOSTS: ${SMTP_HOST}
      LEAN_EMAIL_SMTP_AUTH: ${SMTP_AUTH}
      LEAN_EMAIL_SMTP_USERNAME: ${SMTP_USER}
      LEAN_EMAIL_SMTP_PASSWORD: ${SMTP_PASS}
      LEAN_EMAIL_SMTP_AUTO_TLS: ${SMTP_AUTO_TLS}
      LEAN_EMAIL_SMTP_SECURE: ${SMTP_SECURE}
      LEAN_EMAIL_SMTP_SSLNOVERIFY: ${SMTP_SSLNOVERIFY}
      LEAN_EMAIL_SMTP_PORT: ${SMTP_PORT}
    networks:
      - tracker
      - code-space
    volumes:
      - ${TRACKER_USER_VOLUME}:/var/www/html/public/userfiles
      - ${TRACKER_PUBLIC_VOLUME}:/var/www/html/userfiles
    healthcheck:
      test: ["CMD-SHELL", "curl -sf -o /dev/null http://localhost || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.code-tracker.tls=true"
      - "traefik.http.routers.code-tracker.entrypoints=websecure"
      - "traefik.http.routers.code-tracker.tls.certresolver=myresolver"
      - "traefik.http.routers.code-tracker.rule=Host(`${HOSTNAME}.${DOMAIN}`) && PathPrefix(`/`)"
      - "traefik.http.services.code-tracker.loadbalancer.server.port=80"
    links:
      - code-db:code-db
      - code-cache:code-cache
    depends_on:
      - code-db

  # This is an end user reserved database
  code-db-app:
    container_name: ${DB_APP_CONTAINER_NAME}
    image: ${DB_APP_IMAGE}
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASS}
    ports:
      - "${DB_APP_PORT}:3306"
    networks:
      code-space:
        aliases:
          - db
    volumes:
      - ${DB_APP_VOLUME}:/var/lib/mysql

  # This is an end user database UI manager
  code-db-admin:
    container_name: ${DB_ADMIN_CONTAINER_NAME}
    image: ${DB_ADMIN_IMAGE}
    restart: always
    ports:
      - "${DB_ADMIN_PORT}:80"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.code-db-admin.tls=true"
      - "traefik.http.routers.code-db-admin.entrypoints=websecure"
      - "traefik.http.routers.code-db-admin.tls.certresolver=myresolver"
      - "traefik.http.services.code-db-admin.loadbalancer.server.port=80"
      - "traefik.http.middlewares.code-db-admin.stripprefix.prefixes=/dbm"
      - "traefik.http.routers.code-db-admin.rule=Host(`${HOSTNAME}.${DOMAIN}`) && PathPrefix(`/dbm`)"
    networks:
      - code-space
    links:
      - code-db-app:db
    depends_on:
      - code-db-app
    environment:
      - PMA_ARBITRARY=1

  # This is an end user reserved redis service
  code-cache:
    container_name: ${CACHE_CONTAINER_NAME}
    image: ${CACHE_IMAGE}
    command: redis-server --save 20 1 --loglevel warning --requirepass ${CACHE_PASS}
    restart: always
    ports:
      - "${CACHE_PORT}:6379"
    networks:
      code-space:
        aliases:
          - cache
    volumes:
      - ${CACHE_VOLUME}:/data

  # A container that exposes an API to show its IP address
  code-whoami:
    container_name: code-whoami
    image: traefik/whoami
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.code-whoami.tls=true"
      - "traefik.http.routers.code-whoami.entrypoints=websecure"
      - "traefik.http.routers.code-whoami.tls.certresolver=myresolver"
      - "traefik.http.services.code-whoami.loadbalancer.server.port=80"
      - "traefik.http.middlewares.code-whoami.stripprefix.prefixes=/whoami"
      - "traefik.http.middlewares.code-whoami-headers.headers.customrequestheaders.X-Original-Url=/whoami"
      - "traefik.http.routers.code-whoami.rule=Host(`${HOSTNAME}.${DOMAIN}`) && PathPrefix(`/whoami`)"
      - "traefik.http.routers.code-whoami.middlewares=code-whoami-headers@docker,forward-auth@docker"

  # This container is ment to reastart all unhealthy containers
  autoheal:
    container_name: code-autoheal
    image: willfarrell/autoheal:latest
    tty: true
    restart: always
    environment:
      - AUTOHEAL_INTERVAL=60
      - AUTOHEAL_START_PERIOD=300
      - AUTOHEAL_DEFAULT_STOP_TIMEOUT=10
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
